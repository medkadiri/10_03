/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

 

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'net.bytebuddy.byte-buddy-gradle-plugin' version '1.12.6'
}



repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.

    // https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka
    implementation 'org.springframework.kafka:spring-kafka:2.8.2'


    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'org.apache.kafka:kafka-clients:2.4.0'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    // implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-aop:2.6.2'

    

    // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy
    implementation 'net.bytebuddy:byte-buddy:1.12.6'
    // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy-agent
    implementation 'net.bytebuddy:byte-buddy-agent:1.12.6'

    // https://mvnrepository.com/artifact/com.h2database/h2
    runtimeOnly 'com.h2database:h2'

    // class indexing library
    implementation('org.atteo.classindex:classindex:3.4')
    annotationProcessor('org.atteo.classindex:classindex:3.4')

    //adding the javapoet library
    compileOnly 'com.squareup:javapoet:1.13.0'


    compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'ch.qos.logback:logback-classic:1.2.10'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.22'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/javax.persistence/persistence-api
    compileOnly 'javax.persistence:persistence-api:1.0'

}


import net.bytebuddy.ByteBuddy;
import net.bytebuddy.description.type.TypeDescription
import net.bytebuddy.dynamic.ClassFileLocator
import net.bytebuddy.dynamic.DynamicType

import java.util.Map;

import java.lang.reflect.Modifier;

import java.util.HashMap;

// here ----------------------------------

//import javax.persistence.EntityListeners;

import java.lang.annotation.Target;
import java.lang.annotation.Retention;
import static java.lang.annotation.ElementType.TYPE;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import net.bytebuddy.description.annotation.AnnotationDescription;


/**
 * Specifies the callback listener classes to be used for an 
 * entity or mapped superclass. This annotation may be applied 
 * to an entity class or mapped superclass.
 *
 * @since Java Persistence 1.0
 */
// @Target([TYPE]) 
// @Retention(RUNTIME)

// public @interface EntityListeners {

//     /** The callback listener classes */
//     Class[] value();
// }


// here ----------------------------------
// class ApplicationBootstrap implements net.bytebuddy.build.Plugin {

//     public static class Load extends ClassLoader{
//         public Class findClass(String name, ClassFileLocator classFileLocator) {
//             byte[] b;
//             try {
//                 b = classFileLocator.locate(name).resolve();
//                 return defineClass(name, b, 0, b.length);
//             } catch (IOException e) {
//                 // TODO Auto-generated catch block
//                 e.printStackTrace();
//             }
//             return null;
//         }
//     }

//     @Override
//     boolean matches(TypeDescription target) {
//         return true;
//     }

//     @Override
//     DynamicType.Builder<?> apply(DynamicType.Builder<?> builder, TypeDescription typeDescription, ClassFileLocator classFileLocator) {
//         boolean b = typeDescription.getInheritedAnnotations().toString().contains("@io.microhooks.ddd.Source");
//         Class trackable, sourceListener, customListener;

//         try{
//             Load l = new Load();
//             trackable = l.findClass("io.microhooks.ddd.Trackable", classFileLocator);//classFileLocator.locate("io.microhooks.ddd.Trackable").getClass();
//             sourceListener = l.findClass("io.microhooks.ddd.internal.SourceListener", classFileLocator);
//             customListener = l.findClass("io.microhooks.ddd.internal.CustomListener", classFileLocator);
//             //System.out.println("trackable: " + builder.getClass().getCanonicalName());//trackable.toString());
//         }catch(Exception e){
//             System.out.println("e2: " + e);
//         }

//         System.out.println("Transforming " + b);
//         if(b){
//             System.out.println("1");
//             System.out.println(trackable);
//             System.out.println("2");
//             //builder = builder.implement(Trackable.class);
//             builder = builder.implement(trackable).annotateType(AnnotationDescription.Builder.ofType(EntityListeners.class)
//                             .defineTypeArray("value", sourceListener,
//                                     customListener).build());//.make().load(trackable.getClassLoader());//defineField("trackedFields", Map<String, Object>, Modifier.PUBLIC | Modifier.TRANSIENT).value(new HashMap<>());
//             System.out.println("Hello " + typeDescription.getDeclaredFields());
//             return builder;//.implement(Trackable.class).defineField("trackedFields", Map<String, Object>, Modifier.PUBLIC);
//         }
//         else
//             return builder
//     }

//     @Override
//     void close() throws IOException {

//     }
// }

public class _ClassFileLocator implements ClassFileLocator{
    @Override
    public Resolution locate(String className) throws IOException {
        assert className != null;
        if ( className.equals( this.className ) ) {
            return resolution;
        }
        else {
            return super.locate( className );
        }
    }
    
    @Override
    void close() throws IOException {

    }
}

public class Load extends ClassLoader{
    public Class findClass(String name, _ClassFileLocator classFileLocator) {
        byte[] b;
        try {
            b = classFileLocator.locate(name).resolve();
            return defineClass(name, b, 0, b.length);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return null;
    }
}

Load l = new Load();
Class applicationBootstrap = l.findClass("io.microhooks.ApplicationBootstrap");

byteBuddy {
  transformation {
    _ClassFileLocator classFileLocator = new _ClassFileLocator();
    plugin = applicationBootstrap
  }
}