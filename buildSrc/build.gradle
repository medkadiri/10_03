import java.util.regex.Matcher;

plugins {
    id 'java-gradle-plugin'
    id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'net.bytebuddy.byte-buddy-gradle-plugin' version '1.12.6'


    //added for publishing
    id 'java'
    id 'maven-publish'
    id 'signing'
}



repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy
    implementation 'net.bytebuddy:byte-buddy:1.12.6'
    // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy-agent
    implementation 'net.bytebuddy:byte-buddy-agent:1.12.6'

    implementation 'javax.persistence:persistence-api:1.0'
}

gradlePlugin {
    plugins {
        simplePlugin {
            id = 'com.mkadiri.Microhooks'
            implementationClass = 'com.mkadiri.MicrohooksPlugin'
        }
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

tasks.withType(Javadoc) {
      failOnError false
      options.addStringOption('Xdoclint:none', '-quiet')
      options.addStringOption('encoding', 'UTF-8')
      options.addStringOption('charSet', 'UTF-8')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'io.microhooks'
            artifactId 'plugin'
            version '0.0.2'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "http://localhost:8081/repository/microhooks-private/"
            credentials {
                username "admin"
                password "398217645"
            }
            allowInsecureProtocol = true
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Microhooks'
            name 'Microhooks.io'
            url 'https://github.com/medkadiri/Research'
            organization {
                name 'com.github.medkadiri'
                url 'https://github.com/medkadiri'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/medkadiri/Research/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/medkadiri/Research/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/medkadiri/Research'
                connection 'scm:git:git://github.com/medkadiri/Research.git'
                developerConnection 'scm:git:ssh://git@github.com:medkadiri/Research.git'
            }
            developers {
                developer {
                    name 'Microhooks'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

tasks.withType(GenerateMavenPom).all {
    doLast {
        File file = new File("$buildDir/generated-pom.xml")
        def text = file.text
        def pattern = "(?s)(<dependencyManagement>.+?<dependencies>)(.+?)(</dependencies>.+?</dependencyManagement>)"
        Matcher matcher = text =~ pattern
        if (matcher.find()) {
            text = text.replaceFirst(pattern, "")
            def firstDeps = matcher.group(2)
            text = text.replaceFirst(pattern, '$1$2' + firstDeps + '$3')
        }
        file.write(text)
    }
}